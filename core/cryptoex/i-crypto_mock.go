// Code generated by MockGen. DO NOT EDIT.
// Source: cryptoex\i-crypto.go

// Package cryptoex is a generated GoMock package.
package cryptoex

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICrypto is a mock of ICrypto interface.
type MockICrypto struct {
	ctrl     *gomock.Controller
	recorder *MockICryptoMockRecorder
}

// MockICryptoMockRecorder is the mock recorder for MockICrypto.
type MockICryptoMockRecorder struct {
	mock *MockICrypto
}

// NewMockICrypto creates a new mock instance.
func NewMockICrypto(ctrl *gomock.Controller) *MockICrypto {
	mock := &MockICrypto{ctrl: ctrl}
	mock.recorder = &MockICryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICrypto) EXPECT() *MockICryptoMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockICrypto) Decrypt(ciphertext []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ciphertext)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockICryptoMockRecorder) Decrypt(ciphertext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockICrypto)(nil).Decrypt), ciphertext)
}

// Encrypt mocks base method.
func (m *MockICrypto) Encrypt(plaintext []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", plaintext)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockICryptoMockRecorder) Encrypt(plaintext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockICrypto)(nil).Encrypt), plaintext)
}

// Validate mocks base method.
func (m *MockICrypto) Validate(ciphertext, plaintext []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ciphertext, plaintext)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockICryptoMockRecorder) Validate(ciphertext, plaintext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockICrypto)(nil).Validate), ciphertext, plaintext)
}
